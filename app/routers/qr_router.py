from fastapi import Depends, APIRouter, HTTPException, status, Request
from fastapi.encoders import jsonable_encoder
from fastapi.responses import FileResponse

from app.helpers.qr_generator import generate_qr_image, is_valid_hex_color
from app.schemas.qr_schema import (
    ListQRCodesSchema,
    CreateQRCodeSchema,
    UpdateQRCodeSchema
)

from app.services.qr_service import QRCodeService
from app.configs.logger import logger

import uuid

from app.services.user_service import UserService

QRCodeRouter = APIRouter(prefix="/qr", tags=["qrcode"])

# Get qr codes (GET)
@QRCodeRouter.get("/", status_code=status.HTTP_200_OK, response_model=ListQRCodesSchema, summary="Get all QR codes generated by user")
def get_qr_codes(
        request: Request,
        user_service: UserService = Depends(),
        qr_code_service: QRCodeService = Depends(),
):
    """
    Return a list of QR Codes generated by user with information:
    - **uuid**
    - **url**
    - **color**
    - **size**
    """
    user = user_service.get(request.state.user)
    logger.info(f"Returning all QR codes for user: {user.email}")
    qr_codes_data = qr_code_service.get_all(user.uuid)
    return ListQRCodesSchema(qr_codes=jsonable_encoder(qr_codes_data))

# Endpoint to generate a dynamic QR code
@QRCodeRouter.post("/", status_code=status.HTTP_201_CREATED, response_model=CreateQRCodeSchema, summary="Create QR Code")
def generate_qr_code(
        request: Request,
        qr_code: CreateQRCodeSchema,
        user_service: UserService = Depends(),
        qr_code_service: QRCodeService = Depends()
):
    """
        Create a QR Code with all information:

        - **url**: Each qr code must have a url (string)
        - **color**: Required (integer)
        - **size**: Required (integer)

        **Args**:
            qr_code (QRCode): The qr code to be created

        **Raises**:
            HTTPException: If the QR Code already exists
    """
    user = user_service.get(request.state.user)
    user_uuid = user.uuid
    qr_uuid = uuid.uuid4()
    logger.info(f"Generating QR code for UUID: {qr_uuid}")
    file_name = f"qr_{qr_uuid}.png"
    # Create the QR Code
    file_path = generate_qr_image(
        qr_uuid,
        qr_code.url,
        qr_code.color,
        qr_code.size
    )
    if not file_path:
        logger.error("Error generating QR code")
        raise HTTPException(status_code=500, detail="Error generating QR code")
    logger.info(f"QR code file created: {file_path}")

    # Save QR Code in bd
    qr_code_service.create(qr_code, user_uuid=user_uuid)

    # Return a downloadable file
    return FileResponse(file_path, media_type="image/png", filename=file_name)

@QRCodeRouter.patch("/", status_code=status.HTTP_200_OK, response_model=UpdateQRCodeSchema, summary="Update QR Code")
def update_qr_code(
        qr_uuid: uuid.UUID,
        qr_code_data: UpdateQRCodeSchema,
        qr_code_service: QRCodeService = Depends(),
):
    """
        Update a QR Code with all information:

        - **uuid**: Required (string)
        - **url**: Optional (string)
        - **color**: Optional (integer)
        - **size**: Optional (integer)

        **Args**:
            qr_code (QRCode): The qr code to be updated

        **Raises**:
            HTTPException: If the QR Code does not exist
    """
    logger.info(f"Trying to updating QR code for UUID: {qr_uuid}")

    # Check if the QR Code exists
    qr_code = qr_code_service.get(qr_uuid)
    if not qr_code:
        logger.error("QR Code not found")
        raise HTTPException(status_code=404, detail="QR Code not found")

    if qr_code_data.color and not is_valid_hex_color(qr_code_data.color):
        raise HTTPException(status_code=400, detail=f"The color '{qr_code_data.color}' is not a valid hexadecimal code.")

    # Update the QR Code
    update_params = {
        'url': qr_code_data.url or qr_code.url,
        'color': qr_code_data.color if qr_code_data.color is not None else qr_code.color,
        'size': qr_code_data.size if qr_code_data.size is not None else qr_code.size
    }
    try:
        qr_code_updated = qr_code_service.update(qr_uuid, UpdateQRCodeSchema(**update_params))
    except Exception as e:
        logger.error(f"Database update failed: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to update QR code")

    logger.info(f"QR code updated: {qr_code_data}")
    logger.info(f"Generating QR code for UUID: {qr_uuid}")
    file_name = f"qr_{qr_uuid}.png"
    # Create the QR Code
    file_path = generate_qr_image(
        qr_uuid,
        qr_code_updated.url,
        qr_code_updated.color,
        qr_code_updated.size
    )
    if not file_path:
        logger.error("Error generating QR code")
        raise HTTPException(status_code=500, detail="Error generating QR code")

    logger.info(f"QR code file created: {file_path}")
    return FileResponse(file_path, media_type="image/png", filename=file_name)